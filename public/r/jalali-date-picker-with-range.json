{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "jalali-date-picker-with-range",
	"type": "registry:component",
	"title": "Jalali Date Picker with Range",
	"description": "A Persian/Jalali date range picker component with popover.",
	"dependencies": ["date-fns-jalali@latest", "react-day-picker@latest"],
	"registryDependencies": [
		"button",
		"popover",
		"https://calendar.jbrave.ir/r/jalali-calendar.json"
	],
	"files": [
		{
			"path": "registry/new-york/jalali-date-picker-with-range/jalali-date-picker-with-range.tsx",
			"content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport { addDays, format } from 'date-fns-jalali'\r\nimport { CalendarIcon } from 'lucide-react'\r\nimport { cn } from '@/lib/utils'\r\nimport { Button } from '@/components/ui/button'\r\nimport { JalaliCalendar } from '@/components/jalali-calendar'\r\nimport {\r\n\tPopover,\r\n\tPopoverContent,\r\n\tPopoverTrigger\r\n} from '@/components/ui/popover'\r\n\r\n// Simple interface for our component without relying on external type\r\ninterface MyDateRange {\r\n\tfrom: Date\r\n\tto?: Date | undefined\r\n}\r\n\r\nconst JalaliDatePickerWithRange = ({\r\n\tclassName\r\n}: React.HTMLAttributes<HTMLDivElement>) => {\r\n\t// Use a simpler approach to state to avoid type issues\r\n\tconst [fromDate, setFromDate] = React.useState<Date | undefined>(undefined)\r\n\tconst [toDate, setToDate] = React.useState<Date | undefined>(undefined)\r\n\t// Use useEffect to ensure client-side hydration\r\n\tconst [mounted, setMounted] = React.useState(false)\r\n\r\n\tReact.useEffect(() => {\r\n\t\t// Initialize dates only on the client side\r\n\t\tif (!fromDate) {\r\n\t\t\tsetFromDate(new Date())\r\n\t\t}\r\n\t\tif (!toDate) {\r\n\t\t\tsetToDate(addDays(new Date(), 20))\r\n\t\t}\r\n\t\tsetMounted(true)\r\n\t}, [fromDate, toDate])\r\n\r\n\t// Use a placeholder if not mounted yet\r\n\tif (!mounted) {\r\n\t\treturn (\r\n\t\t\t<div className='w-full h-10 max-w-[300px] bg-gray-100 animate-pulse rounded' />\r\n\t\t)\r\n\t}\r\n\r\n\t// Construct our date range object\r\n\tconst dateRange = fromDate\r\n\t\t? {\r\n\t\t\t\tfrom: fromDate,\r\n\t\t\t\tto: toDate\r\n\t\t  }\r\n\t\t: undefined\r\n\r\n\t// Handle selection from the calendar\r\n\tconst handleSelect = (range: any) => {\r\n\t\tif (range?.from) setFromDate(range.from)\r\n\t\tif (range?.to) setToDate(range.to)\r\n\t\telse if (range?.from && !range.to) setToDate(undefined)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={cn('grid gap-2', className)}>\r\n\t\t\t<Popover>\r\n\t\t\t\t<PopoverTrigger asChild>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tid='date'\r\n\t\t\t\t\t\tdir='rtl'\r\n\t\t\t\t\t\tvariant='outline'\r\n\t\t\t\t\t\tclassName={cn(\r\n\t\t\t\t\t\t\t'w-[300px] justify-start text-left font-normal',\r\n\t\t\t\t\t\t\t!fromDate && 'text-muted-foreground'\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CalendarIcon />\r\n\t\t\t\t\t\t{fromDate ? (\r\n\t\t\t\t\t\t\ttoDate ? (\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t{format(fromDate, 'dd LLLL y')} -{' '}\r\n\t\t\t\t\t\t\t\t\t{format(toDate, 'dd LLLL y')}\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\tformat(fromDate, 'LLL dd, y')\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<span>انتخاب تاریخ</span>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</PopoverTrigger>\r\n\t\t\t\t<PopoverContent className='w-auto p-0' align='start'>\r\n\t\t\t\t\t<JalaliCalendar\r\n\t\t\t\t\t\tmode='range'\r\n\t\t\t\t\t\tdefaultMonth={fromDate}\r\n\t\t\t\t\t\tselected={dateRange}\r\n\t\t\t\t\t\tonSelect={handleSelect}\r\n\t\t\t\t\t\tnumberOfMonths={2}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</PopoverContent>\r\n\t\t\t</Popover>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport { JalaliDatePickerWithRange }\r\n",
			"type": "registry:component"
		}
	]
}
